#!/bin/bash
# SPDX-License-Identifier: LGPL-2.1-or-later

set -e

usage() {
    echo "
Usage: $(basename $0) [OPTIONS] <PR/MR>
Fetch a pull-request from github/gitlab

OPTIONS
    -b <branch>   	Branch on which to checkout this pr
    -r <remote>    	Use <remote>, otherwise uses fetchpr.remote from config
    -t <github|gitlab>	Force the forge type - default will figure out from url
" 1>&$1;
    exit $(($1 - 1));
}

OPT_BRANCH=
OPT_REMOTE=
OPT_REMOTE_TYPE=
args=0
while getopts "b:r:t:h" o; do
    case "${o}" in
        b) OPT_BRANCH=${OPTARG}; args=$[$args + 2] ;;
        r) OPT_REMOTE=${OPTARG}; args=$[$args + 2] ;;
        t) OPT_REMOTE_TYPE=${OPTARG}; args=$[$args + 2] ;;
        h) usage 1;;
        \?) usage 2;;
    esac
done
shift $args

find_remote() {
	if [[ -n "$OPT_REMOTE" ]]; then
		return
	fi

	OPT_REMOTE="$(git config --get fetchpr.remote || true)"

	if [[ -z "$OPT_REMOTE" ]]; then
		remotes=($(git remote))
		if [[ ${#remotes[@]} -eq 1 ]]; then
			OPT_REMOTE=${remotes[0]}
		elif [[ "${remotes[*]}" == *"origin "* ]]; then
			OPT_REMOTE=origin
		fi

		echo "Remote auto-detect:  $OPT_REMOTE"
	fi
}

find_remote
pr=$1

if [[ -n "$OPT_BRANCH" ]] && git rev-parse --verify -q "$OPT_BRANCH"; then
    echo "Branch $OPT_BRANCH already exists" >&2
    exit 1
fi

if [[ -z "$OPT_REMOTE_TYPE" ]]; then
	remote_url=$(git config remote.$OPT_REMOTE.url)
else
	remote_url="$OPT_REMOTE_TYPE"
fi

if [[ "$remote_url" == *github* ]]; then
	ref=refs/pull/$pr/head
elif [[ "$remote_url" == *gitlab* ]]; then
	ref=refs/merge-requests/$pr/head
else
	echo "ERROR: Unkonwn remote type - compatible with github/gitlab only"
	exit 1
fi

git fetch $OPT_REMOTE $ref:$OPT_BRANCH
