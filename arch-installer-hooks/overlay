#!/bin/bash

command="$1"
shift

usage() {
    cat <<EOF >&$1
Usage: overlay <command> <path>...

Where <command> is either append or replace.  Each <path> might be a path to a
directory or a tarball.
EOF
}

append() {
    local f="$1"
    local target="$ROOTFS/$f"

    if [[ -d "$target" ]]; then
        echo "overlay-append: $target is a directory, skipping..." >&2
        return 1
    fi

    if ! mkdir -p $(dirname $target); then
        echo "overlay-append: couldn't create directory for "$target", skipping..." >&2
        return 1
    fi

    cat >> "$target"
}

case $command in
append)
    while [[ -n $1 ]]; do
        f=$1
        if [[ -d $f ]]; then
            d=$f
            find $f -type f | while read f; do
                target=$(realpath "$f" --relative-to "$d")
                cat "$f" | append $target
                true
            done || echo "overlay-append: unable to read directory \"$d\", ignoring..." >&2
        elif [[ -f $f ]]; then
            # if not a directory, it must be a tarball
            tarball="$f"
            tar tf $f | grep -v [/]$ | while read f; do
                target=${f#./} # avoid error due to leading "./"
                tar xf "$tarball" -O $f | append $target
                true
            done || echo "overlay-append: unable to open tarball \"$f\", ignoring..." >&2
        else
            echo "overlay-append: argument \"$f\" is not a file or directory, ignoring..." >&2
        fi
        shift
    done
    ;;
replace)
    while [[ -n $1 ]]; do
        f=$1
        if [[ -d $f ]]; then
            cp --archive -T "$f" "$ROOTFS" || echo "overlay-replace: error on copying \"$f\" recursively, ignoring..."
        elif [[ -f $f ]]; then
            tar xf "$f" -C "$ROOTFS" || echo "overlay-replace: unable to extract tarball \"$f\", ignoring..."
        else
            echo "overlay-replace: argument \"$f\" is not a file or directory, ignoring..." >&2
        fi
        shift
    done
    ;;
-h)
    usage 1
    exit 0
    ;;
*)
    echo "Invalid command \"$command\" to overlay" >&2
    usage 2
    exit 1
    ;;
esac

